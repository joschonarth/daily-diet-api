openapi: 3.0.0
info:
  title: Daily Diet API
  description: A complete solution for tracking meals and water intake, helping users maintain healthy habits with personalized goals and progress monitoring. Developed with Python, Flask, and SQLAlchemy.
  version: 1.0.0
tags:
  - name: meals
    description: Endpoints for managing meals, logging calorie intake, and meal preferences.
  - name: water
    description: Endpoints for tracking water intake and monitoring hydration goals.
  - name: users
    description: Endpoints for managing user authentication, creation, and logout.
paths:
  /api/meals/add:
    post:
      summary: Add a new meal
      operationId: addMeal
      tags:
        - meals
      security:
        - bearerAuth: []
      requestBody:
        description: Meal data to add.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                calories:
                  type: integer
      responses:
        '200':
          description: Meal added successfully
        '401':
          description: Unauthorized

  /api/meals/update/{meal_id}:
    put:
      summary: Update an existing meal
      operationId: updateMeal
      tags:
        - meals
      security:
        - bearerAuth: []
      parameters:
        - name: meal_id
          in: path
          required: true
          description: ID of the meal to update
          schema:
            type: integer
      requestBody:
        description: Updated meal data.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                calories:
                  type: integer
      responses:
        '200':
          description: Meal updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Meal not found

  /api/meals/delete/{meal_id}:
    delete:
      summary: Delete a meal
      operationId: deleteMeal
      tags:
        - meals
      security:
        - bearerAuth: []
      parameters:
        - name: meal_id
          in: path
          required: true
          description: ID of the meal to delete
          schema:
            type: integer
      responses:
        '200':
          description: Meal deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Meal not found

  /api/meals:
    get:
      summary: Get all meals
      operationId: getMeals
      tags:
        - meals
      security:
        - bearerAuth: []
      parameters:
        - name: date
          in: query
          description: Date to filter meals
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of meals
        '401':
          description: Unauthorized

  /api/meals/{meal_id}:
    get:
      summary: Get a specific meal
      operationId: getMeal
      tags:
        - meals
      security:
        - bearerAuth: []
      parameters:
        - name: meal_id
          in: path
          required: true
          description: ID of the meal to get
          schema:
            type: integer
      responses:
        '200':
          description: Meal details
        '401':
          description: Unauthorized
        '404':
          description: Meal not found

  /api/meals/{meal_id}/favorite:
    patch:
      summary: Mark or unmark a meal as favorite
      operationId: toggleFavorite
      tags:
        - meals
      security:
        - bearerAuth: []
      parameters:
        - name: meal_id
          in: path
          required: true
          description: ID of the meal
          schema:
            type: integer
      responses:
        '200':
          description: Meal marked/unmarked as favorite
        '401':
          description: Unauthorized
        '404':
          description: Meal not found

  /api/meals/favorites:
    get:
      summary: Get favorite meals
      operationId: getFavoriteMeals
      tags:
        - meals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of favorite meals
        '401':
          description: Unauthorized

  /api/meals/calorie-goal:
    put:
      summary: Update calorie goal
      operationId: updateCalorieGoal
      tags:
        - meals
      security:
        - bearerAuth: []
      requestBody:
        description: Calorie goal to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                calorie_goal:
                  type: integer
      responses:
        '200':
          description: Calorie goal updated successfully
        '401':
          description: Unauthorized

  /api/meals/calorie-goal/streak:
    get:
      summary: Get calorie goal streak
      operationId: calorieStreak
      tags:
        - meals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Calorie goal streak
        '401':
          description: Unauthorized

  /api/meals/report:
    get:
      summary: Generate meal report
      operationId: generateReport
      tags:
        - meals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Report generated successfully
        '401':
          description: Unauthorized

  /api/water/add:
    post:
      summary: Add water intake
      operationId: addWaterIntake
      tags:
        - water
      security:
        - bearerAuth: []
      requestBody:
        description: Amount of water to add.
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: Water intake amount (in ml)
      responses:
        '200':
          description: Water intake added successfully
        '401':
          description: Unauthorized

  /api/water/delete/{water_id}:
    delete:
      summary: Remove water intake
      operationId: removeWaterIntake
      tags:
        - water
      security:
        - bearerAuth: []
      parameters:
        - name: water_id
          in: path
          required: true
          description: ID of the water intake to remove
          schema:
            type: integer
      responses:
        '200':
          description: Water intake removed successfully
        '401':
          description: Unauthorized
        '404':
          description: Water intake not found

  /api/water:
    get:
      summary: Get water intake
      operationId: getWaterIntake
      tags:
        - water
      security:
        - bearerAuth: []
      parameters:
        - name: date
          in: query
          description: Date to filter water intake
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of water intake
        '401':
          description: Unauthorized

  /api/water/total:
    get:
      summary: Get total water intake
      operationId: getTotalWaterIntake
      tags:
        - water
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Total water intake
        '401':
          description: Unauthorized

  /api/water/goal:
    put:
      summary: Update water goal
      operationId: updateWaterGoal
      tags:
        - water
      security:
        - bearerAuth: []
      requestBody:
        description: Water goal to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                water_goal:
                  type: integer
      responses:
        '200':
          description: Water goal updated successfully
        '401':
          description: Unauthorized

  /api/water/streak:
    get:
      summary: Get water intake streak
      operationId: waterStreak
      tags:
        - water
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Water intake streak
        '401':
          description: Unauthorized
          
  /api/users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - users
      requestBody:
        description: User data to create a new account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
        '409':
          description: User already exists

  /api/users/login:
    post:
      summary: Log in to the application
      operationId: login
      tags:
        - users
      requestBody:
        description: Login credentials (username and password).
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized, invalid credentials
        '400':
          description: Bad request

  /api/users/logout:
    get:
      summary: Log out from the application
      operationId: logout
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user.
        username:
          type: string
          description: Username for the user.
        email:
          type: string
          description: Email address of the user.
        password:
          type: string
          description: Password of the user (stored hashed).
        daily_calorie_goal:
          type: number
          format: float
          description: Daily calorie goal for the user.
        daily_water_goal:
          type: number
          format: float
          description: Daily water intake goal for the user.
        calorie_streak_count:
          type: integer
          description: Number of consecutive days the user met their calorie goal.
        last_calorie_streak_date:
          type: string
          format: date
          description: Last date when the user met their calorie goal streak.
        water_streak_count:
          type: integer
          description: Number of consecutive days the user met their water intake goal.
        last_water_streak_date:
          type: string
          format: date
          description: Last date when the user met their water intake goal streak.

    Meal:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the meal.
        name:
          type: string
          description: Name of the meal.
        description:
          type: string
          description: Detailed description of the meal.
        date_time:
          type: string
          format: date-time
          description: Date and time when the meal was logged.
        in_diet:
          type: boolean
          description: Indicates whether the meal is part of the user's diet plan.
        category:
          type: string
          description: Category of the meal (e.g., Breakfast, Lunch, etc.).
        calories:
          type: number
          format: float
          description: Caloric value of the meal.
        favorite:
          type: boolean
          description: Indicates whether the meal is marked as a favorite by the user.
        user_id:
          type: integer
          description: ID of the user who logged the meal.

    Water:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the water intake record.
        quantity:
          type: number
          format: float
          description: Amount of water consumed (in milliliters).
        date_time:
          type: string
          format: date-time
          description: Date and time when the water intake was logged.
        user_id:
          type: integer
          description: ID of the user who logged the water intake.
